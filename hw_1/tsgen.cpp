#include <iostream>
#include <cstdlib>
using namespace std;

/*
 * tsgen -- generate transcript data 
 *
 *  usage: tsgen number-of-transcripts [random-seed]
 * output: C++ defs of an array of structs of type Transcript
 *
 * idea: each transcript is a struct with an array of semesters
 *	 and each semester has an array of courses.  So, we
 *	 generate lists of courses, each list identified by
 *	 the transcript and semester to which it belongs.
 *
 *	 We write code that puts the address the correct array of
 *	 courses in the correct semester in a list of semesters
 *	 AND put the address each list of semesters in the correct
 *	 transcript.
 *
 * hist: 2013-01-30 created by Bruce Molay for comp15
 */

const int YEAR0  = 2011;		// earliest transcript year

const int NSEMLO = 1;			// range of# of semesters/student
const int NSEMHI = 10;

const int NCRSLO = 3;			// range of# of courses/student
const int NCRSHI = 6;

const int SEED_DEFAULT = 15;		// default random seed

//
// Note: these should come from a file, but this is simpler for now
//
const string depts[] = { "COMP", "MATH", "GEOL", "BIOL", "HIST", "CLS",
			 "AST" , "EC"  , "INTR", "PHIL", "LING" };

const int MAX_DEPTS = 10;
const int CRNLO = 1;
const int CRNHI = 280;

const string FALL	= "F";
const string SPRING	= "S";

// for grade distribution, consider the range from 0 to 99
// and put in dividers for each group.  The size of the division
// determines the probability of getting that grade
//
const int GDIV_A = 20;			// 0..19
const int GDIV_B = 80;			// 20..79
const int GDIV_C = 95;			// 80..94
const int GDIV_D = 100;			// 95..99
const int GDIV_MAX = 99;

// declarations
void write_intro();
void make_transcripts(int);
int  rand_int(int, int);
void oops(string);

int main(int ac, char *av[])
{
	if ( ac == 1 ){
		oops("usage: tsgen #transcripts [random-seed]");
	}
	srand( ac > 2 ? atoi(av[2]) : SEED_DEFAULT);	// randomize
	write_intro();
	make_transcripts(atoi(av[1]));			// generate
	return 0;
}
//
// write_intro -- write start of file
//
void write_intro()
{
	cout << "#include \"TestDat.h\"\n";
	cout << endl;
	cout << "using namespace std;\n";
	cout << endl << endl;
	cout << "// Sample Transcript data generated by tsgen.cpp\n";
	cout << endl;
	cout << "/*\n";
	cout << " * Note: The array is called tsList[].  \n";
	cout << " *       The number of elements is tsNum.\n";
	cout << " *       See the end of the file for those variables\n";
	cout << " *\n";
	cout << " * You can use this array and int in your main() function:\n";
	cout << " *    just put #include \"TestDat.h\"\n";
	cout << " *              at the top of the main file \n";
	cout << " *    and then use the array name tsList\n";
	cout << " *                 and the int tsNum in your code.\n";
	cout << " *\n";
	cout << " * Yes, these *look* global, but \n";
	cout << " *      the word 'static' makes them private to this file\n";
	cout << " * Only the tsList and tsNum are global\n";
	cout << " *\n";
	cout << " * Note: the name of an array is the same as &arrayname[0]\n";
	cout << " */\n";
}

// make_transcripts -- print code for transcript data
//  args: how many
//  rets: nothing
//  outp: C++ code for variable defs and intializations
//
void make_transcripts(int nTS)
{
	int	num_sems[nTS];
	void	write_sems(int,int);		// write data, retn count
	void	print_student_id(int);

	// Generate several arrays of Semesters, one array for each Transcript
	for(int i=0; i<nTS; i++)
	{
		// pick a random  number for # of semesters
		int	nSems = rand_int(NSEMLO, NSEMHI);
		write_sems(nSems, i);		// write out semester data
		num_sems[i] = nSems;		// record it
	}

	cout << "//\n";
	cout << "// The full Transcript array is here\n";
	cout << "//\n";
	cout << "int tsNum = " << nTS << ";\n";		// array len

	// Generate the array of Transcripts
	cout << "Transcript tsList[] =\t{ \n";		// array start
	for(int i=0; i<nTS; i++)
	{
		cout << "\t\t\t  {";			// start of struct
		print_student_id(i);			// the ID
		cout << ", ";				// a comma
		cout << num_sems[i] << ", ";		// #Sems,
		cout << "semList" << i << " }";		// ptr
		if ( i < nTS-1 )			// maybe a comma
			cout << ",";			//  it depends
		cout << endl;
	}
	cout << "\t\t\t};\n";			// close the array
}
//
// write_sems -- write def of an array of semesters
//  args: nSems: how many semsters to generate, tsID: id for this transcript
//  rets: how many semesters were generated
//  outp: the code for the lists of courses AND 
//	  the code for the list of sems
//  note: name of the list is semList_#  where #  is value of i
//
int write_sems(int nSems, int tsID)
{
	int	year = YEAR0;
	string	term = FALL;
	int	num_courses[nSems];
	void	write_courses(int, int, int);

	cout << "// -----------------------------------------------------------\n";
	cout << "// Data for transcript " << tsID << ": " << nSems << " Semesters\n";
	cout << "//\n";

	// Generate several arrays of Courses, one arrays per semester
	for(int i=0; i<nSems; i++)
	{
		// pick a random  number for # of courses
		int	nCourses = rand_int(NCRSLO, NCRSHI);
		write_courses(nCourses, tsID, i); // write out courses data
		num_courses[i] = nCourses;	  // record it
	}
	printf("\n// Semester List for Transcript %d\n\n", tsID);
	printf("static Semester semList%d[] = \t{\n", tsID);	// array start

	// Generate one array of Semesters
	for(int i=0; i<nSems; i++)
	{
		cout << "\t\t\t  {";			  // start of struct
		cout << '"' << term << "\", " << year << ", " << num_courses[i] << ", ";
		printf("crsList%d_%d }", tsID, i);	  // ptr to crs list

		if ( i < nSems-1 )
			cout << ",";			  // a nice comma
		cout << endl;
		if ( term == FALL ){		  	// advance term
			year++; term = SPRING;
		} else {
			term = FALL;
		}
	}
	cout << "\t\t\t};\n";		// close array of semesters
}

//
// write_courses -- write def of an array of courses
//  args: nCourses: how many courses to generate, 
//            tsID: id for this transcript
//           semID: semester does this belong to
//  rets: nothing
//  outp: the code for the list of courses
//  note: name of the list is crsList#_# where #s are tsID and semID
//
void write_courses(int nCourses, int tsID, int semID)
{
	void print_rand_course();
	void print_rand_grade();

	printf("\n// Courses List for TS %d, Semester %d\n\n", tsID, semID);
	printf("static Course crsList%d_%d[] =\t{\n", tsID, semID);

	// now to write the actual courses, each of the form
	//  { "COMP15", "A" }
	for( int i=0; i<nCourses; i++ )
	{
		cout << "\t\t\t  {";		// start of struct
		print_rand_course(); cout << ", ";
		print_rand_grade();  cout << " }";
		if ( i < nCourses-1 )
			cout << ",";			  // a nice comma
		cout << endl;
	}
	cout << "\t\t\t};\n";		// close array of grades
}

//
// print_student_id(i)
//   purp: print a made up student id that is unique
//   args: an int
//   rets: nothing
//   does: makes up a name of format S# where # is i * 100 + a randnum
//         all padded to 6 digits
//
void print_student_id(int i)
{
	printf("\"S%06d\"", ((100 * i) + rand_int(0,99)) );
}

// print_rand_course -- combine a dept and a number
//  args: none
//   does: prints a course name in double quotes
//
void print_rand_course()
{
	int	crs_num = rand_int(0, MAX_DEPTS);

	printf("\"%s%03d\"", depts[crs_num].c_str(), rand_int(CRNLO, CRNHI));
}
//
// print_rand_grade -- return a random grade
//   args: none
//   does: prints a grad in double quotes
//
void print_rand_grade()
{
	int	num = rand_int(0,GDIV_MAX);
	if ( num < GDIV_A )
		cout << "\"A\"";
	else if ( num < GDIV_B )
		cout << "\"B\"";
	else if ( num < GDIV_C )
		cout << "\"C\"";
	else if ( num < GDIV_D )
		cout << "\"D\"";
	else
		cout  << "\"F\"";
}

//
// return a random int between lo and hi inclusive
// note: should not use % but should scale using MAXRAND
// 
int rand_int(int lo, int hi)
{
	return lo + ( rand() % ( hi-lo+1 ) );
}

void oops(string s)
{
	cerr << "tsgen error: " << s << endl;
	exit(1);
}
