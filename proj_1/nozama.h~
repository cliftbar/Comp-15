
#ifndef nozama.h
#define
#include <iostream>
#include <cstdlib>
#include <string>

using namespace std

struct Order
{
	//Unique ID number
	int id
	//Arrival Time
	int t_arrive;
	//How long after arrival time it takes
	//to find and load into a packing unit
	int t_fetch;
	//How long it takes to get packaged
	int t_pack;
	
	//determines packaging priority
	string priority;
};

struct Queue_node
{
	Order data;
	Order* next;
	Order* prev;
};

class Retrieval_Unit{
public:
	//default constructor
	Retrieval_Unit()
	//picks up order
	void get_order(Order order_in);
	//passes order to packer
	Order deliver_order();
	//determines if the fetching unit is free,
	bool unit_free();
private:
	//chooses the shortest queue by reading in
	void choose_queue(Packing_Unit);
	//holds the current order
	Order curr_order;
	//increments the internal time and
	//the time of held order
	void increment_time()
	//holds the current fetch time,
	//resets to zero after every order
	int curr_time;
	//holds status of unit, free or not free
	bool unit_status;
};

class Packing_Unit{
public:
	int queue_length()
	void add_to_queue(Order o_add);
	
	
private:
	//checks if the order added is supreme or not
	void is_supreme()
	//contains the order currently being packed
	Order* curr_order;
	//holds the start of the queue
	Order* queue_start;
	//holds the current packing time,
	//resets to zero after every order.
	int curr_time;
	//store the time of an order on hold
	int t_hold;
};

#endif
