//BogValidator.cpp
//Created by: Cameron Barclift
//Validates the users input and individual words
#include "BogValidator.h"
#include "Dictionary.h"
#include <cstdlib>
#include <iostream>
#include <cctype>

//////////////////////////Public Functions////////////////////////////////////
BogValidator::BogValidator()
{
	//constructor
	check_row = 0;
	check_col = 0;
	check_string = "";
	start_lett_list = NULL;
	said_cap = 2;
	said_array = new string[said_cap];
	num_said = 0;
}

BogValidator::~BogValidator()
{
	//destructor
}

//Reads in the dictionary
bool BogValidator::readDict()
{
	string temp;
	
	cin >> temp;
	
	//If the word read in has a q, remove the u after if present
	for (int i = 0; i < (int)temp.length(); ++i){
		if (toupper(temp[i]) == 'Q' && toupper(temp[i+1]) == 'U'){
			temp.erase(temp.begin() + i + 1);
		}
		
	}
	
	//Read in data until the sentinel value
	while (temp != "."){
		if (!dict.insert(temp)){
			return false;
		}
		cin >> temp;
		//If a q is present, and the next letter is a u, the u is removed
		for (int i = 0; i < (int)temp.length(); ++i){
			if (toupper(temp[i]) == 'Q' && toupper(temp[i+1]) == 'U'){
				temp.erase(temp.begin() + i + 1);
			}
		}
	}
	return true;
}

//reads in the board
bool BogValidator::readBoard()
{
	string row_string;
	unsigned  int read_cols;
	cin >> rows;
	cin >> cols;
	
	read_cols = cols;
	
	build_board();
	
	//Add characters to board.  Return false if incorrect data
	for (int i = 0; i < rows; ++i){
		if(cin >> row_string && row_string.length() == read_cols){
			for (int j = 0; j < cols; ++j){
				board[i][j].l.c = toupper(row_string[j]);
				board[i][j].l.row = i;
				board[i][j].l.col = j;
				board[i][j].visited = false;
			}
		}
		else {
			return false;
		}
	}
	return true;
}

//Returns true if the string is valid
bool BogValidator::isValid(string s)
{
	bool in_dict = false;
	bool in_board = false;
	check_string = s;
	string rec_string = "";
	bool found_start = find_start_letter(s[0]);
	rec_string[0] = s[0];
	BogLettList* list_iter = start_lett_list;
	
	in_dict = dict.isWord(s);
	
	//If the first letter of the word is on the board and the length is long
	//enough or if the first letter is found, the word contains a q, and the
	//words length is one less than the minimum, enter if statement
	if ((found_start && s.length() >= 3 && in_dict) || (found_start &&
		contains_q(s) && in_dict && s.length() >= 2)){
		
		while (list_iter != NULL){
			check_row = list_iter->letter.row;
			check_col = list_iter->letter.col;
			in_board = on_board(rec_string, 0,check_row, check_col);
			if (in_board){
				break;
			}
			list_iter = list_iter->next;
		}
	}else{
		in_board = false;
	}
	
	return (in_board && in_dict);
}

//Reads in words from cin, and checks if they are valid.  The the word is
//valid, it is added to the list of valid words
void BogValidator::checkWords()
{
	string curr_word;
	string temp = "";
	bool valid;
	bool said = false;
	bool q_no_u = false;
	
	while (cin >> curr_word){
		//reset said and has q values
		said = false;
		q_no_u = false;
		
		curr_word = to_upper(curr_word);
		q_no_u = q_without_u(curr_word);
		
		rm_u(curr_word);//remove u after q
		
		//If q_no_u is false, from earlier if statement, check if word is
		//valid
		if (!q_no_u){
			valid = isValid(curr_word);//check if word is valid
			add_u(curr_word);//add u back in
			said = been_said(curr_word);//check if word has been said
			
			//if not said, add to list
			if(!said){
				said_array[num_said] = curr_word;
				++num_said;
			}

			expand_said();//expand array if said_array is full
			
			//print the result
			if(valid && !said){
				cout << "OK " << curr_word << endl;
			}else {
				cout << "NO " << curr_word << endl;
			}
		}
	}
}

//Recursive function to check if a word is on the board
bool BogValidator::on_board(string s_in, int s_pos, int c_row,
int c_col)
{
	/*
	int row_up = c_row - 1;
	int row_down = c_row + 1;
	int col_right = c_col + 1;
	int col_left = c_col - 1;
	int next_pos = s_pos + 1;
	bool up, up_right, right, down_right, down, down_left, left, up_left;
	*/
	bool state = false;
	s_in += check_string[s_pos];
	
	//If the position has been visited, return false, otherwise set board to
	//visited
	if (board[c_row][c_col].visited){
		board[c_row][c_col].visited = false;
		return false;
	}else {
		board[c_row][c_col].visited = true;
	}
	
	//If we've found the word, set visited to false return true
	if (s_in == check_string){
		board[c_row][c_col].visited = false;
		return true;
	}
	
	/*
	//propogate in all directions
	up = p_board_director(s_in, next_pos, row_up, c_col);//check up
	up_right = p_board_director(s_in, next_pos, row_up, col_right);
	//check up, right
	right = p_board_director(s_in, next_pos, c_row, col_right);//check right
	down_right = p_board_director(s_in, next_pos, row_down, col_right);
	//check down, right
	down = p_board_director(s_in, next_pos, row_down, c_col);//check down
	down_left = p_board_director(s_in, next_pos, row_down, col_left);
	//check down, left
	left = p_board_director(s_in, next_pos, c_row, col_left);//check left
	up_left = p_board_director(s_in, next_pos, row_up, col_left);
	//check up, left
	
	//if any directions return true, state is true.  
	state = (true ==
		(up||up_right||right||down_right||down||down_left||left||up_left));
	*/
	state = propogation(s_in, s_pos, c_row, c_col);
	//mark position as unvisited and leave
	board[c_row][c_col].visited = false;
	return state;
}

//Function to direct the recursive function, and check if the indicated
//postitin is in bounds.  If not in bounds return false
bool BogValidator::p_board_director(string curr_string, int n_pos, int  n_row,
		int n_col)
{
	if ((0 <= n_row && n_row < rows) && (0 <= n_col && n_col < cols)
	&& board[n_row][n_col].l.c == check_string[n_pos]){
		return on_board(curr_string, n_pos, n_row, n_col);
	}
	return false;
}

//Builds boggle board framework
void BogValidator::build_board()
{
	board = new Letter*[rows];
	for (int i = 0; i < rows; ++i){
		board[i] = new Letter[cols];
	}
}

//Prints the boggle board
void BogValidator::print_board()
{
	for (int i = 0; i < rows; ++i){
		for (int j = 0; j < cols; ++j){
			cout << board[i][j].l.c << " ";
		}
		cout << endl;
	}
}

//Checks if the first letter of the word to be validated is on the  board. 
//All possible start points are added to the list
bool BogValidator::find_start_letter(char c)
{
	bool present = false;
	BogLettList* temp = start_lett_list;
	
	for (int i = 0; i < rows; ++i){
		for (int j = 0; j < cols; ++j){
			if (board[i][j].l.c == c){
				if (start_lett_list == NULL){
					start_lett_list = new BogLettList;
					temp = start_lett_list;
				}else {
					temp->next = new BogLettList;
					temp = temp->next;
				}
				temp->next = NULL;
				temp->letter = board[i][j].l;
				present = true;
			}
		}
	}
	
	return present;
}

//Converts the string passed in to uppercase
string BogValidator::to_upper(string s)
{
	int s_len = s.length();
	for (int i = 0; i < s_len; ++i){
		s[i] = toupper(s[i]);
	}
	return s;
}

//Expands the said_array to double the size
void BogValidator::expand_said()
{
	if (said_cap-1 <= num_said){
		string* temp = new string[said_cap*2];
	
		//copy to new array
		for (int i = 0; i < said_cap; ++i){
			temp[i] = said_array[i];
		}
	
		delete [] said_array;
		said_cap = said_cap * 2;
	
		said_array = temp;
	}
}

//Returns true if the string contains a q
bool BogValidator::contains_q(string str_in)
{
	bool is_q = false;
	
	for (int i = 0; i < (int)str_in.length(); ++i){
		if(str_in[i] == 'Q'){
			is_q = true;
		}
	}
	
	return is_q;
}

bool BogValidator::q_without_u(string curr_word)
{
	//If a word is input that has a q with no u, immediately output NO
	for (int i = 0; i < (int)curr_word.length(); ++i){
		if (curr_word[i] == 'Q' && curr_word[i+1] != 'U'){
			cout << "NO " << curr_word << endl;
			return true;
		}
	}
	return false;
}

void BogValidator::rm_u(string &curr_word)
{
	//Remove the u after a q if there is a q
	for (int i = 0; i < (int)curr_word.length(); ++i){
		if (curr_word[i] == 'Q' && curr_word[i+1] == 'U'){
			curr_word.erase(curr_word.begin() + i + 1);
		}
	}
}

void BogValidator::add_u(string &curr_word)
{
	//add u back in after the q
	for (int i = 0; i < (int)curr_word.length() + 1; ++i){
		if (curr_word[i] == 'Q'){
			curr_word.insert(curr_word.begin() + i + 1, 'U');
		}
	}
}

bool BogValidator::been_said(string curr_word)
{
	//check if the word has been said before by the user
	if(num_said == 0){
		said_array[num_said] = curr_word;
		++num_said;
	}else{
		for (int i = 0; i < num_said; ++i){
			if (curr_word == said_array[i]){
				return true;
			}
		}
	}
	return false;
}

bool BogValidator::propogation(string s_in, int s_pos, int c_row, int c_col)
{
	int row_up = c_row - 1;
	int row_down = c_row + 1;
	int col_right = c_col + 1;
	int col_left = c_col - 1;
	int next_pos = s_pos + 1;
	bool up, u_rgt, right, d_rgt, down, d_left, left, up_left;
	
	//propogate in all directions
	up = p_board_director(s_in, next_pos, row_up, c_col);//check up
	u_rgt = p_board_director(s_in, next_pos, row_up, col_right);
	//check up, right
	right = p_board_director(s_in, next_pos, c_row, col_right);//check right
	d_rgt = p_board_director(s_in, next_pos, row_down, col_right);
	//check down, right
	down = p_board_director(s_in, next_pos, row_down, c_col);//check down
	d_left = p_board_director(s_in, next_pos, row_down, col_left);
	//check down, left
	left = p_board_director(s_in, next_pos, c_row, col_left);//check left
	up_left = p_board_director(s_in, next_pos, row_up, col_left);
	//check up, left
	
	//if any directions return true, state is true.  
	return (true == (up||u_rgt||right||d_rgt||down||d_left||left||up_left));
}
	





















