 /* sortedlist.cpp 
  * Comp 15, Spring 2013
  * Lab 1
  * Name: Cameron Barclift
  */
  
#include "sortedlist.h"
#include <cstdlib>

/******

PUBLIC METHODS

******/

 /* Does: Constructor, sets head to NULL
  * Arguments: none
  * Returns: none
  * Calls: none
  * Notes: none
  */
SortedList::SortedList(){
	head = NULL;
}


 /* Does: prints the values of the list in order starting at the head
  * Arguments: none
  * Returns: none
  * Calls: none
  * Notes: this method is "const", which is a promise to the compiler
  *  that it won't change the value of any private variables.
  */
void SortedList::print() const{
  Node* iterator = head;
  while(iterator != NULL){
    cout << iterator->data << " ";
    iterator = iterator->next;
  }
  cout << endl;
}

 /* Does: returns whether or not list is empty
  * Arguments: none
  * Returns: true if list is empty
  * Calls: none
  * Notes: this method is "const", which is a promise to the compiler
  *  that it won't change the value of any private variables.
  */
bool SortedList::isEmpty() const{
  if(head == NULL)
    return true;
  else
    return false;
}

 /* Does: 
  * Arguments: 
  * Returns: 
  * Calls: 
  * Notes: 
  */
void SortedList::insert(int v){

//your code here and your comment above
//inserting an element, head is a member of a class

	Node* np = new Node;
	Node* iter = head;
	Node* prev = NULL;

	np->data = v;
	np->next = NULL;
	
	if (isEmpty()){
		head = np;
		prev = np;
		return;
	}else if (iter->data > np->data){
		np->next = iter;
		head = np;
		return;
	}else{
		while((iter->data < np->data) && iter->next != NULL){
			prev = iter;
			iter = iter->next;
		}
		if (iter->next != NULL){
			prev->next = np;
			np->next = iter;
			return;
		}else if (iter->next == NULL){
			if(iter->data < np->data){
				iter->next = np;
				np->next = NULL;
				return;
			}else if(iter->data >= np->data){
				prev->next = np;
				np->next = iter;
				return;
			}
		}
	}
}

 /* Does: copy constructor
  * Arguments: 
  * Returns: 
  * Calls: insertNodesFromList
  * Notes: This is a constructor, so don't forget to initialize 
  *  head to NULL! Otherwise what would happen when you call
  *  insertNodesFromList?
  */
SortedList::SortedList(SortedList &rhs)
{
	Node* h_in = rhs.head;
	
	head = NULL;
	
	while(h_in != NULL){
		insert(h_in->data);
		h_in = h_in->next;
	}
}

SortedList::SortedList(const SortedList &rhs)
{
	Node* h_in = rhs.head;
	
	head = NULL;
	
	while(h_in != NULL){
		insert(h_in->data);
		h_in = h_in->next;
	}
}

 /* Does: Assignment Operator
  * Arguments: 
  * Returns: 
  * Calls: SortedList::deleteList, SortedList::insertNodesFromList
  * Notes: This is not a constructor - a SortedList has already been
  *  made when you call this.  So, no need to set head to NULL here.
  *  In fact, that would be a mistake if head was pointing to a node.
  */
const SortedList& SortedList::operator=(const SortedList &rhs){	
//check to make sure that you don't overwrite yourself
//with yourself...just in case someone does list1 = list1;
  
  if (this != &rhs) {
	  deleteList();
	  copyNodesFromList(rhs.head);    
  }
  
    //unlike copy constructor, return this (a pointer to yourself)
  return *this;
}

//find length of sortedlist
int SortedList::length()
{
	int len = 0;
	Node* iter = head;
	
	while(iter != NULL){
		++len;
		iter = iter->next;
	}
	
return len;
}

//find the max value of the sortedlist
int SortedList::findMax()
{
	int max = head->data;
	Node* iter = head;
	
	while(iter != NULL){
		if (iter->data > max){
			max = iter->data;
		}
		iter = iter->next;
	}
	
return max;
}

//finds the median of the sortedlist
double SortedList::findMedian()
{
	double median;
	int len = length();
	Node* iter = head;
	cerr << "len: " << len << endl;
	cerr << "len%2: " << len%2 << endl;
	if (isEmpty()){
		exit(1);
	}else if (len%2 != 0){
		for (int i = 0; i <= ((len/2)); ++i){
			iter = iter->next;
		}
		median = iter->data;
	}else if (len%2 == 0){
		for (int i = 1; i <= (len/2)-1; ++i){
			cerr << "iter->data: " << iter->data << endl;
			iter = iter->next;
		}
		cerr << "iter->data: " << iter->data << endl;
		cerr << "iter->data->next: " << iter->next->data << endl;

		cerr << "len/2: " << len/2 << endl;
		median = (iter->data + iter->next->data)/2;
	}
	
return median;
}

//returns the fequency of the passed value
int SortedList::freq(int val)
{
	Node* iter = head;
	int freq = 0;
	
	if(isEmpty()){
		return freq;
	}
	while (iter != NULL){
		if (val == iter->data){
			++freq;
		}
		
		iter = iter->next;
	}
	
return freq;
}

SortedList SortedList::findDuplicates()
{
	SortedList new_list;
	Node* iter = head;
	int len = length();
	int comp_array[len];
	int i = 0;
	bool used = false;
	
	while (iter->next != NULL){
		//cerr << "iter->data: " << iter->data << endl;
		if (iter->next != NULL && iter->data == iter->next->data){
			cerr << "dup\n";
			for (int k = 0; k < i; ++k){
				 	
				if (comp_array[k] == iter->data){
					used = true;
					cerr << "used: " << used << endl;
					break;
				}
			}
			if (!used){
				comp_array[i] = iter->data;
				cerr << "comp_array[]: " << endl;
				new_list.insert(iter->data);
			}
			
			//cerr << "inserted into new thang\n";	
		}
		
		if (iter->next != NULL){
			cerr << "iter->next != NULL\n";
			iter = iter->next;
		}
		++i;
		used = false;
	}
	//cerr << "out of loop\n";

return new_list;
}

 /* Does: destructor - deletes any nodes in list 
  * Arguments: none
  * Returns: none
  * Calls: SortedList::deleteList
  * Notes: none
  */
SortedList::~SortedList(){
	deleteList();	
}




/******

	PRIVATE METHODS

******/

 /* Does: 
  * Arguments: 
  * Returns: 
  * Calls: 
  * Notes: Remember to set head to NULL when you're done!
  */
void SortedList::deleteList()
{
	Node* temp;
	Node* iter = head;
		
	while (iter != NULL){
		temp = iter;
		iter = iter->next;
		delete temp;
	}
	head = NULL;
}

 /* Does: 
  * Arguments: 
  * Returns: 
  * Calls: 
  * Notes: 
  */
void SortedList::copyNodesFromList(Node* otherList){

  // your code here and comment above
    Node* h_in = otherList;

	while (h_in != NULL){
		  insert(h_in->data);
		  h_in = h_in->next;
	  }
}

